# -*- coding: utf-8 -*-
"""Rep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksp_6H98MCBM5GaMcIcfTuUvZ3cruNBA

# DICTIONARY
"""

from collections import deque

pakistan_cities = {
    'Lahore': ['Faisalabad'],
    'Faisalabad': ['Lahore', 'Sargodha'],
    'Sargodha': ['Faisalabad', 'Rawalpindi', 'Multan'],
    'Rawalpindi': ['Sargodha', 'Islamabad'],
    'Islamabad': ['Rawalpindi', 'Peshawar'],
    'Peshawar': ['Islamabad', 'Mardan'],
    'Mardan': ['Peshawar', 'Swat'],
    'Swat': ['Mardan']
}

def bfs_shortest_path(graph, start, goal):
    queue = deque([[start]])
    visited = set()

    while queue:
        path = queue.popleft()
        current_city = path[-1]

        if current_city == goal:
            return path

        if current_city not in visited:
            visited.add(current_city)
            for neighbor in graph.get(current_city, []):
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)

    return None

def dfs_path(graph, start, goal, path=None, visited=None):
    if path is None:
        path = []
    if visited is None:
        visited = set()

    path.append(start)
    visited.add(start)

    if start == goal:
        return path

    for neighbor in graph.get(start, []):
        if neighbor not in visited:
            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())
            if result:
                return result

    return None

start_city = "Lahore"
goal_city = "Swat"

bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from Lahore to Swat:", bfs_result)

dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from Lahore to Swat:", dfs_result)

"""we are creating a list of cities and their connections. Each city (like **Lahore** or **Faisalabad**) is connected to other cities. For example, **Lahore** is connected to **Faisalabad**, and **Faisalabad** is connected to both **Lahore** and **Sargodha**. This is done using a Python **dictionary**, where each city is a **key** and the connected cities are listed as a **value**.

"""